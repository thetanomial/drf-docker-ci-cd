name: Deploy Django App to DigitalOcean

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install required packages
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Set up SSH Key with Passphrase
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/python-droplet
          chmod 600 ~/.ssh/python-droplet

          # Start SSH agent properly
          eval $(ssh-agent -s)

          # Create SSH_ASKPASS script securely
          echo -e "#!/bin/bash\necho '${{ secrets.DO_SSH_PASSPHRASE }}'" > ~/.ssh/ssh-askpass
          chmod +x ~/.ssh/ssh-askpass

          # Load the SSH key with the passphrase
          DISPLAY=:0 SSH_ASKPASS=~/.ssh/ssh-askpass ssh-add ~/.ssh/python-droplet < /dev/null

          # Ensure SSH config is set
          echo -e "Host *\n  IdentityFile ~/.ssh/python-droplet\n  StrictHostKeyChecking no" > ~/.ssh/config

      - name: Check SSH Keys
        run: ssh-add -L || echo "No SSH keys loaded"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/drf-docker-ci-cd:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/drf-docker-ci-cd:latest

      - name: SSH into Droplet and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/python-droplet root@${{ secrets.DO_DROPLET_IP }} << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/drf-docker-ci-cd:latest
            docker stop drf-docker-ci-cd-container || true
            docker rm drf-docker-ci-cd-container || true
            docker run -d --name drf-docker-ci-cd-container -p 8000:8000 \
              --restart always \
              ${{ secrets.DOCKER_USERNAME }}/drf-docker-ci-cd:latest
            docker image prune -af
          EOF
